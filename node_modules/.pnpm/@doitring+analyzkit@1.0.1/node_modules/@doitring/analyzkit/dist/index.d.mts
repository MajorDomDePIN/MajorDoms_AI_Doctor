import { D as Data, S as Step } from './ratings-h9iJsonM.mjs';
export { r as ratings } from './ratings-h9iJsonM.mjs';
import dayjs__default from 'dayjs';
export { g as groupings } from './groupings-0LuX8r9R.mjs';
import BigNumber from 'bignumber.js';

declare function daily$3(array: Data[]): {
    eval: "high" | "normal" | "low";
    score: number;
    daily: {
        date: number;
        data: Data[];
        ytd: string;
        day: string;
        durations: {
            dep: number;
            lig: number;
            rem: number;
            act: number;
            tol: number;
        };
        percents: {
            dep: number;
            lig: number;
            rem: number;
        };
        scores: {
            lig: number;
            dep: number;
            dur: number;
        };
        score: number;
        evals: {
            com: "high" | "normal" | "low";
            dep: "high" | "normal" | "low";
            lig: "high" | "normal" | "low";
            rem: "high" | "normal" | "low";
        };
    }[];
    duration: number;
    times: {
        average: {
            sleep: string;
            wakes: string;
        };
        earliest: {
            wakes: string | undefined;
            sleep: string | undefined;
        };
        atlatest: {
            wakes: string | undefined;
            sleep: string | undefined;
        };
    };
};
declare function day$3(date: number, array: Data[]): {
    durations: {
        dep: number;
        lig: number;
        rem: number;
        act: number;
        tol: number;
    };
    percents: {
        dep: number;
        lig: number;
        rem: number;
    };
    scores: {
        lig: number;
        dep: number;
        dur: number;
    };
    score: number;
    evals: {
        com: "high" | "normal" | "low";
        dep: "high" | "normal" | "low";
        lig: "high" | "normal" | "low";
        rem: "high" | "normal" | "low";
    };
    data: Data[];
    ytd: string;
    date: number;
    day: string;
};
declare function week$3(date: number, array: Data[]): {
    data: Data[];
    eval: "high" | "normal" | "low";
    score: number;
    daily: {
        date: number;
        data: Data[];
        ytd: string;
        day: string;
        durations: {
            dep: number;
            lig: number;
            rem: number;
            act: number;
            tol: number;
        };
        percents: {
            dep: number;
            lig: number;
            rem: number;
        };
        scores: {
            lig: number;
            dep: number;
            dur: number;
        };
        score: number;
        evals: {
            com: "high" | "normal" | "low";
            dep: "high" | "normal" | "low";
            lig: "high" | "normal" | "low";
            rem: "high" | "normal" | "low";
        };
    }[];
    duration: number;
    times: {
        average: {
            sleep: string;
            wakes: string;
        };
        earliest: {
            wakes: string | undefined;
            sleep: string | undefined;
        };
        atlatest: {
            wakes: string | undefined;
            sleep: string | undefined;
        };
    };
};
declare function month$3(date: number, array: Data[]): {
    data: Data[];
    eval: "high" | "normal" | "low";
    score: number;
    daily: {
        date: number;
        data: Data[];
        ytd: string;
        day: string;
        durations: {
            dep: number;
            lig: number;
            rem: number;
            act: number;
            tol: number;
        };
        percents: {
            dep: number;
            lig: number;
            rem: number;
        };
        scores: {
            lig: number;
            dep: number;
            dur: number;
        };
        score: number;
        evals: {
            com: "high" | "normal" | "low";
            dep: "high" | "normal" | "low";
            lig: "high" | "normal" | "low";
            rem: "high" | "normal" | "low";
        };
    }[];
    duration: number;
    times: {
        average: {
            sleep: string;
            wakes: string;
        };
        earliest: {
            wakes: string | undefined;
            sleep: string | undefined;
        };
        atlatest: {
            wakes: string | undefined;
            sleep: string | undefined;
        };
    };
};

declare namespace sleeps {
  export { daily$3 as daily, day$3 as day, month$3 as month, week$3 as week };
}

declare function daily$2(array: Data[]): {
    average: number;
    daily: {
        date: number;
        data: Data[];
        day: string;
        ytd: string;
        score: number;
        hours: {
            hour: string;
            time: dayjs__default.Dayjs;
            data: Data[];
            average: number;
            min: number;
            max: number;
        }[];
        eval: "normal" | "abnormal" | "danger";
        average: number;
        min: number;
        max: number;
    }[];
    min: number;
    max: number;
};
declare function day$2(date: number, array: Data[]): {
    hours: {
        hour: string;
        time: dayjs__default.Dayjs;
        data: Data[];
        score: number;
        hours: {
            hour: string;
            time: dayjs__default.Dayjs;
            data: Data[];
            average: number;
            min: number;
            max: number;
        }[];
        eval: "normal" | "abnormal" | "danger";
        average: number;
        min: number;
        max: number;
    }[];
    score: number;
    eval: "normal" | "abnormal" | "danger";
    average: number;
    min: number;
    max: number;
    date: number;
    data: Data[];
    day: string;
    ytd: string;
};
declare function week$2(date: number, array: Data[]): {
    data: Data[];
    average: number;
    daily: {
        date: number;
        data: Data[];
        day: string;
        ytd: string;
        score: number;
        hours: {
            hour: string;
            time: dayjs__default.Dayjs;
            data: Data[];
            average: number;
            min: number;
            max: number;
        }[];
        eval: "normal" | "abnormal" | "danger";
        average: number;
        min: number;
        max: number;
    }[];
    min: number;
    max: number;
};
declare function month$2(date: number, array: Data[]): {
    data: Data[];
    average: number;
    daily: {
        date: number;
        data: Data[];
        day: string;
        ytd: string;
        score: number;
        hours: {
            hour: string;
            time: dayjs__default.Dayjs;
            data: Data[];
            average: number;
            min: number;
            max: number;
        }[];
        eval: "normal" | "abnormal" | "danger";
        average: number;
        min: number;
        max: number;
    }[];
    min: number;
    max: number;
};

declare namespace oxygens {
  export { daily$2 as daily, day$2 as day, month$2 as month, week$2 as week };
}

declare function daily$1(array: Data[]): {
    average: number;
    daily: {
        date: number;
        data: Data[];
        day: string;
        ytd: string;
        eval: "normal" | "abnormal";
        average: number;
        hours: {
            hour: string;
            time: dayjs__default.Dayjs;
            data: Data[];
            average: number;
            min: number;
            max: number;
        }[];
        min: number;
        max: number;
        score: number;
    }[];
    min: number;
    max: number;
};
declare function day$1(date: number, array: Data[]): {
    hours: {
        hour: string;
        time: dayjs__default.Dayjs;
        data: Data[];
        eval: "normal" | "abnormal";
        average: number;
        hours: {
            hour: string;
            time: dayjs__default.Dayjs;
            data: Data[];
            average: number;
            min: number;
            max: number;
        }[];
        min: number;
        max: number;
        score: number;
    }[];
    eval: "normal" | "abnormal";
    average: number;
    min: number;
    max: number;
    score: number;
    date: number;
    data: Data[];
    day: string;
    ytd: string;
};
declare function week$1(date: number, array: Data[]): {
    data: Data[];
    average: number;
    daily: {
        date: number;
        data: Data[];
        day: string;
        ytd: string;
        eval: "normal" | "abnormal";
        average: number;
        hours: {
            hour: string;
            time: dayjs__default.Dayjs;
            data: Data[];
            average: number;
            min: number;
            max: number;
        }[];
        min: number;
        max: number;
        score: number;
    }[];
    min: number;
    max: number;
};
declare function month$1(date: number, array: Data[]): {
    data: Data[];
    average: number;
    daily: {
        date: number;
        data: Data[];
        day: string;
        ytd: string;
        eval: "normal" | "abnormal";
        average: number;
        hours: {
            hour: string;
            time: dayjs__default.Dayjs;
            data: Data[];
            average: number;
            min: number;
            max: number;
        }[];
        min: number;
        max: number;
        score: number;
    }[];
    min: number;
    max: number;
};

declare namespace rates {
  export { daily$1 as daily, day$1 as day, month$1 as month, week$1 as week };
}

declare function setup(target: number): void;
declare function daily(array: Step[], target?: number): {
    avers: {
        step: number;
        kcal: string;
        km: string;
    };
    daily: {
        date: number;
        data: Step[];
        day: string;
        ytd: string;
        eval: "high" | "low" | "lack";
        kcal: string;
        km: string;
        total: number;
        score: number;
        hours: {
            hour: string;
            time: dayjs__default.Dayjs;
            data: Step[];
            kcal: string;
            km: string;
            total: number;
        }[];
    }[];
};
declare function day(date: number, array: Step[], target?: number): {
    hours: {
        hour: string;
        time: dayjs__default.Dayjs;
        data: Step[];
        total: number;
        kcal: string;
        km: string;
    }[];
    eval: "high" | "low" | "lack";
    kcal: string;
    km: string;
    total: number;
    score: number;
    date: number;
    data: Step[];
    day: string;
    ytd: string;
};
declare function week(date: number, array: Step[], target?: number): {
    eval: "high" | "low" | "lack";
    kcal: string;
    km: string;
    total: number;
    score: number;
    hours: {
        hour: string;
        time: dayjs__default.Dayjs;
        data: Step[];
        kcal: string;
        km: string;
        total: number;
    }[];
    data: Step[];
    avers: {
        step: number;
        kcal: string;
        km: string;
    };
    daily: {
        date: number;
        data: Step[];
        day: string;
        ytd: string;
        eval: "high" | "low" | "lack";
        kcal: string;
        km: string;
        total: number;
        score: number;
        hours: {
            hour: string;
            time: dayjs__default.Dayjs;
            data: Step[];
            kcal: string;
            km: string;
            total: number;
        }[];
    }[];
};
declare function month(date: number, array: Step[], target?: number): {
    eval: "high" | "low" | "lack";
    kcal: string;
    km: string;
    total: number;
    score: number;
    hours: {
        hour: string;
        time: dayjs__default.Dayjs;
        data: Step[];
        kcal: string;
        km: string;
        total: number;
    }[];
    data: Step[];
    avers: {
        step: number;
        kcal: string;
        km: string;
    };
    daily: {
        date: number;
        data: Step[];
        day: string;
        ytd: string;
        eval: "high" | "low" | "lack";
        kcal: string;
        km: string;
        total: number;
        score: number;
        hours: {
            hour: string;
            time: dayjs__default.Dayjs;
            data: Step[];
            kcal: string;
            km: string;
            total: number;
        }[];
    }[];
};

declare const steps_daily: typeof daily;
declare const steps_day: typeof day;
declare const steps_month: typeof month;
declare const steps_setup: typeof setup;
declare const steps_week: typeof week;
declare namespace steps {
  export { steps_daily as daily, steps_day as day, steps_month as month, steps_setup as setup, steps_week as week };
}

declare const index$1_oxygens: typeof oxygens;
declare const index$1_rates: typeof rates;
declare const index$1_sleeps: typeof sleeps;
declare const index$1_steps: typeof steps;
declare namespace index$1 {
  export { index$1_oxygens as oxygens, index$1_rates as rates, index$1_sleeps as sleeps, index$1_steps as steps };
}

declare function percentage(total: BigNumber.Value, count: BigNumber.Value, decimalPlaces?: number): number;
declare function plus(array: (string | number)[]): string;
declare function formatEtherByFormat(value: any, decimalPlaces?: number): string;
declare function formatEther(value?: any): string;
declare function format(value?: BigNumber.Value, decimalPlaces?: number): string;
declare function gte(num: BigNumber.Value, n: number): boolean;
declare function lt(num: BigNumber.Value, n: number): boolean;
declare function parse(n: BigNumber.Value): {
    v: number;
    d: number;
    n: string;
};
declare function average(numbers: number[]): number;

declare function riposte<T>(...args: [cond: boolean, value: T][]): T;
declare function arange(x1: number, x2?: number, stp?: number, z?: number[], z0?: number): number[];

declare function getTimePoints(difference: number): string[];

declare const index_arange: typeof arange;
declare const index_average: typeof average;
declare const index_format: typeof format;
declare const index_formatEther: typeof formatEther;
declare const index_formatEtherByFormat: typeof formatEtherByFormat;
declare const index_getTimePoints: typeof getTimePoints;
declare const index_gte: typeof gte;
declare const index_lt: typeof lt;
declare const index_parse: typeof parse;
declare const index_percentage: typeof percentage;
declare const index_plus: typeof plus;
declare const index_riposte: typeof riposte;
declare namespace index {
  export { index_arange as arange, index_average as average, index_format as format, index_formatEther as formatEther, index_formatEtherByFormat as formatEtherByFormat, index_getTimePoints as getTimePoints, index_gte as gte, index_lt as lt, index_parse as parse, index_percentage as percentage, index_plus as plus, index_riposte as riposte };
}

export { Data, Step, index$1 as statistics, index as utils };
